import time
import random

def permutations(A, n, index = 0):
    '''
        递归全排列
    '''
    if index < n:
        i = index
        while i < n:
            A[i], A[index] = A[index], A[i]
            permutations(A, n, index + 1)
            A[i], A[index] = A[index], A[i]
            i += 1
    else :
        print(A)
def portation(A, left, right):
    '''
        快速排序子过程
        基准选用最后一个元素
        index表示较小元素所构成的子串最后一个下标+1，即下一个数字插入的位置
        若与base的判断使用大于号，则会包括交换的两个数都大于基准的情况
    '''
    base = A[right]
    index = left
    for i in range(right - left):
        if A[left + i] < base:
            A[left + i], A[index] = A[index], A[left + i]
            index += 1
    A[index], A[right] = A[right], A[index]
    return index
def portation1(A, left, right):
    '''
        粪代码
    '''
    base = A[right]
    small = []
    big = []
    j = left
    while left <= right:
        if A[left] < base:
            small.append(A[left])
        else :
            big.append(A[left])
        left += 1
    index = len(small)
    small.append(base)
    small.extend(big)
    for i in range(len(small) - 1):
        A[j + i] = small[i]
    return index + j
def sert(A, left, right, flag):
    '''
        归并排序子过程
        将[left, flag][flag+1, right]两个子串按照升序重新插入
        两个子串长度不一定相等
    '''
    L = []
    R = []
    index = left
    while index <= flag:
        L.append(A[index])
        index += 1
    while index <= right:
        R.append(A[index])
        index += 1
    L.append(float('inf'))
    R.append(float('inf'))
    i, j, k = 0, 0, left
    while (k <= right):
        if R[j] < L[i] :
            A[k] = R[j]
            j += 1
        else :
            A[k] = L[i]
            i += 1
        k += 1
def count_merge(A, left, right, mid):
    '''
        求逆序数子过程
        统计介于mid左侧和右侧的逆序对
    '''
    L = []
    R = []
    count = 0
    index = left
    while index <= mid:
        L.append(A[index])
        index += 1
    while index <= right:
        R.append(A[index])
        index += 1
    L.append(float('inf'))
    R.append(float('inf'))
    i, j, k, count = 0, 0, left, 0
    counted = False
    while (k <= right):
        if (R[j] < L[i] and counted == False and L[i] != float('inf')) :
            count += len(L) - i - 1
            counted = True
        if R[j] < L[i] :
            A[k] = R[j]
            j += 1
            counted = False
        else :
            A[k] = L[i]
            i += 1
        k += 1
    return count
def count_inversions(A, left, right):
    '''
        递归求逆序数
        分别求出两段子序列的逆序数，再加以介于两个子序列的逆序对数
    '''
    if left >= right:
        return 0
    else :
        count = 0
        mid = int((left + right) / 2)
        count += count_inversions(A, left, mid)
        count += count_inversions(A, mid + 1, right)
        count += count_merge(A, left, right, mid)
        return count
def insert(A,n):
    '''
        插入排序
    '''
    for i in range(1,n):
        get = A[i]
        j = i-1
        while (j >= 0 and get <= A[j]):
            A[j+1] = A[j]
            j -= 1
        A[j+1] = get
def insert_bi(A, n):
    '''
        二分插入排序
    '''
    for i in range(1,n):
        get = A[i]
        left = 0
        right = i - 1
        while (right - left >= 0):
            mid = int((left + right) / 2)
            if A[mid] <= get :
                left = mid +1
            else :
                right = mid - 1
        j = i - 1
        while j >= left:
            A[j + 1] = A[j]
            j -= 1
        A[j + 1] = get
def bubble(A, n):
    '''
        冒泡排序
    '''
    sign = 1
    if sign:
        for i in range(n-1):
            sign = 0
            for j in range(n-i-1):
                if A[j] > A[j+1]:
                    A[j], A[j+1] = A[j+1], A[j]
                    sign = 1
def select(A, n):
    '''
        选择排序
    '''
    for i in range(n-1):
        index = i
        for j in range(i+1, n):
            if (A[index]>A[j]):
                index = j
        if index != i:
            A[i], A[index] = A[index], A[i]
def wine(A, n):
    '''
        鸡尾酒排序
    '''
    sign = 1
    if sign:
        for i in range(int(n/2)):
            sign = 0
            for j in range(i, n-i-1):
                if A[j] > A[j+1]:
                    A[j], A[j+1] = A[j+1], A[j]
            for j in range(n-i-2, i, -1):
                if A[j] < A[j-1]:
                    A[j], A[j-1] = A[j-1], A[j]
                    sign = 1
def shell(A, n):
    '''
        希尔排序
    '''
    step = []
    i = int(n/2)
    while int(i) > 1:
        step.append(int(i))
        i /= 1.5
    step.append(1)
    print('steps',step)
    for s in step:
        for i in range(1,n,s):
            get = A[i]
            j = i-s
            while (j >= 0 and get <= A[j]):
                A[j+s] = A[j]
                j -= s
            A[j+s] = get
def box(A, n, max):
    '''
        桶排序
    '''
    boxes = []
    for i in range(max + 1):
        boxes.append(0)
    for each in A:
        boxes[each] += 1
    A = []
    for index in range(max + 1):
        while boxes[index]:
            A.append(index)
            #print(index, end = '')
            boxes[index] -= 1
    return A
def merge(A, left, right):
    '''
        递归归并排序
        left与right相等为平凡情况，不做任何处理
        flag为偏向于left的中间值
        每次调用，视为两个子串已排序完毕
    '''
    if right <= left :
        return
    else :
        flag = int((left + right) / 2)
        merge(A, left, flag)
        merge(A, flag + 1, right)
        sert(A, left, right, flag)
def merge_iteration(A, n):
    '''
        迭代归并排序
        步长从1到n/2+1，每次合并相邻步长个单位的子串
        例：    6,5,4,3,2,1,0
        step = 1：
            分别调用sert合并[6][5],[4][3],[2][1],[0]
            5,6,3,4,1,2,0
        step = 2：
            3,4,5,6,0,1,2
        step = 4：
            0,1,2,3,4,5,6
        注意临界元素的判断
    '''
    step = 1
    while step < n:
        left = 0
        while left + step - 1 < n:
            flag = left + step - 1
            right = flag + step if flag + step < n else n-1
            sert(A, left, right, flag)
            left = right +1
        step *= 2
def quick(A, left, right):
    '''
        快速排序
        平凡条件必须为不等式，每次递归并非二分
        index为调整后基准的下标
        每次调用protation相当于已完成基准的定位，递归时不必考虑基准
        例：
            5,3,2,1,4
            3,2,1,4,5
            1,3,2,4,5
            1,2,3,4,5
    '''
    if left >= right:
        return
    else :
        index = portation(A, left, right)
        quick(A, left, index - 1)
        quick(A, index + 1, right)

a = []
n = 3000
max = 10000
for i in range(n):
    a.append(random.randint(1,max))
print(a)
start = time.time()
#下列各排序调用后数值为排序3,000个10,000以内随机正整数用时，单位秒
merge(a, 0, n-1)#0.063
#shell(a, n)#0.52
#select(a, n)#0.88
#insert(a, n)#0.90
#bubble(a, n)#1.9
#wine(a, n)#1.9
#a = box(a, n, max)
#merge_iteration(a, n)#0.052
#insert_bi(a, n)#0.79
#quick(a, 0, n-1)#0.034|0.045
#a.sort()#0.001
#count = count_inversions(a, 0, n - 1)
end = time.time()
print(a)
#print(count)
#permutations(a, n)
print(end - start)
